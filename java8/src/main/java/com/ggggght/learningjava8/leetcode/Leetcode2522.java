package com.ggggght.learningjava8.leetcode;

/**
 给你一个字符串 s ，它每一位都是 1 到 9 之间的数字组成，同时给你一个整数 k 。

 如果一个字符串 s 的分割满足以下条件，我们称它是一个 好 分割：


 s 中每个数位 恰好 属于一个子字符串。
 每个子字符串的值都小于等于 k 。


 请你返回 s 所有的 好 分割中，子字符串的 最少 数目。如果不存在 s 的 好 分割，返回 -1 。

 注意：


 一个字符串的 值 是这个字符串对应的整数。比方说，"123" 的值为 123 ，"1" 的值是 1 。
 子字符串 是字符串中一段连续的字符序列。




 示例 1：


 输入：s = "165462", k = 60
 输出：4
 解释：我们将字符串分割成子字符串 "16" ，"54" ，"6" 和 "2" 。每个子字符串的值都小于等于 k = 60 。
 不存在小于 4 个子字符串的好分割。


 示例 2：


 输入：s = "238182", k = 5
 输出：-1
 解释：这个字符串不存在好分割。




 提示：


 1 <= s.length <= 10⁵
 s[i] 是 '1' 到 '9' 之间的数字。
 1 <= k <= 10⁹


 Related Topics 贪心 字符串 动态规划 👍 10 👎 0

 */
public class Leetcode2522 {
    public static void main(String[] args) {

        System.out.println(minimumPartition(

            899964460));
        // System.out.println(minimumPartition("165462",60));
        // System.out.println(minimumPartition("238182", 5));
        // System.out.println(batch(101));
        // System.out.println(batch(99999));
        // System.out.println(batch(5));
    }

    static int batch(int i) {
        int res = 0;
        while (i > 0) {
            i /= 10;
            res++;
        }

        return res;
    }

    public static int minimumPartition(String s, int k) {
        if (s == null || s.length() == 0) return -1;

        // List<String> list = new ArrayList<>();
        int count = 0;
        char[] chars = s.toCharArray();
        boolean reCalc = false;
        long tmp = 0;
        int len = 0;
        int a = k;
        int batch = 0;
        while (a > 0) {
            a /= 10;
            batch++;
        }
        for (int i = 0; i <= chars.length - 1; i++) {
            if (reCalc) {
                reCalc = false;
                tmp = 0;
                len = 0;
            }

            len++;
            tmp = tmp * 10 + (chars[i] - '0');
            if (i == chars.length - 1 && tmp <= k) {
                // list.add(s.substring(i - len + 1));
                count++;
            }
            if (len < batch) continue;
            if (batch == 1 && len == 1 && tmp > k) return -1;

            if (len > batch || tmp > Integer.MAX_VALUE || tmp > k || tmp < 0) {
                reCalc = true;
                count++;
                // list.add(s.substring(i - len + 1, i));
                i--;
            }

        }
        // System.out.println(list);
        // int finalBatch = batch;
        // list.stream().filter(i -> i.length() > finalBatch).forEach(System.out::println);
        return count == 0 ? -1 : count;
    }
}

